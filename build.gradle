plugins {
	id 'io.spring.dependency-management' version '1.0.9.RELEASE'
	id 'org.jetbrains.kotlin.jvm' version '1.3.72' apply false
	id 'java'
	id "org.sonarqube" version "2.8"
}

allprojects {
	group = 'org.springdoc'
	version = '1.4.2-SNAPSHOT'
}

repositories {
	mavenLocal()
	mavenCentral()
}

ext {
	springBootVersion = '2.3.0.RELEASE'
	swaggerApiVersion = '2.1.2'
	swaggerUiVersion = '3.26.0'
}

subprojects {

	apply plugin: 'java'
	apply plugin: 'java-library'
	apply plugin: 'maven-publish'
	apply plugin: 'io.spring.dependency-management'

	configurations {
		testCompileOnly.extendsFrom compileOnly
	}

	repositories {
		mavenLocal()
		mavenCentral()
	}

	dependencies {
		testImplementation "org.springframework.boot:spring-boot-starter-test:${springBootVersion}"
	}

	dependencyManagement {
		imports { mavenBom("org.springframework.boot:spring-boot-dependencies:${springBootVersion}") }
		dependencies {
			dependency "org.springframework.boot:spring-boot-configuration-processor:${springBootVersion}"
			dependency "io.swagger.core.v3:swagger-models:${swaggerApiVersion}"
			dependency "io.swagger.core.v3:swagger-annotations:${swaggerApiVersion}"
			dependency "io.swagger.core.v3:swagger-integration:${swaggerApiVersion}"
			dependency "org.webjars:swagger-ui:${swaggerUiVersion}"
			dependency 'org.webjars:webjars-locator-core:0.45'
			dependency 'io.github.classgraph:classgraph:4.8.44'
			dependency 'org.springframework.security:spring-security-core:5.3.2.RELEASE'
			dependency 'org.springframework.security.oauth:spring-security-oauth2:2.3.8.RELEASE'
			dependency 'javax.xml:jaxb-impl:2.1'
			dependency 'jakarta.servlet:jakarta.servlet-api:4.0.3'
			dependency 'org.projectlombok:lombok:1.18.12'
			dependency 'org.codehaus.groovy:groovy:2.5.11'
		}
	}

	test {
		useJUnitPlatform()
	}

	sourceCompatibility = '1.8'

	java {
		withSourcesJar()
		withJavadocJar()
	}

	publishing {
		publications {
			mavenJava(MavenPublication) {
				from components.java
				versionMapping {
					usage('java-api') {
						fromResolutionOf('runtimeClasspath')
					}
					usage('java-runtime') {
						fromResolutionResult()
					}
				}
			}
		}
		repositories {
			maven {
				if (project.version.endsWith('-SNAPSHOT')) {
					url "https://oss.sonatype.org/content/repositories/snapshots"
				} else {
					url "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
				}
				credentials {
					username System.getenv("OSSRH_USER")
					password System.getenv("OSSRH_PASS")
				}
			}
		}
	}

	tasks.withType(JavaCompile) {
		options.encoding = 'UTF-8'
	}
}

sonarqube {
	properties {
		property("sonar.projectKey", "springdoc_springdoc-openapi")
	}
}