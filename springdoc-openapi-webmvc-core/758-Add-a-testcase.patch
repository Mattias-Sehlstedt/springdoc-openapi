diff --git a/springdoc-openapi-webmvc-core/src/test/java/test/org/springdoc/api/app126/HelloController.java b/springdoc-openapi-webmvc-core/src/test/java/test/org/springdoc/api/app126/HelloController.java
new file mode 100644
index 0000000..02c6ef6
--- /dev/null
+++ b/springdoc-openapi-webmvc-core/src/test/java/test/org/springdoc/api/app126/HelloController.java
@@ -0,0 +1,61 @@
+/*
+ *
+ *  * Copyright 2019-2020 the original author or authors.
+ *  *
+ *  * Licensed under the Apache License, Version 2.0 (the "License");
+ *  * you may not use this file except in compliance with the License.
+ *  * You may obtain a copy of the License at
+ *  *
+ *  *      https://www.apache.org/licenses/LICENSE-2.0
+ *  *
+ *  * Unless required by applicable law or agreed to in writing, software
+ *  * distributed under the License is distributed on an "AS IS" BASIS,
+ *  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  * See the License for the specific language governing permissions and
+ *  * limitations under the License.
+ *
+ */
+
+package test.org.springdoc.api.app126;
+
+import static org.springframework.http.MediaType.APPLICATION_PROBLEM_JSON_VALUE;
+import static org.springframework.http.ResponseEntity.ok;
+
+import java.util.ArrayList;
+import java.util.Collection;
+
+import org.springframework.http.ResponseEntity;
+import org.springframework.web.bind.annotation.GetMapping;
+import org.springframework.web.bind.annotation.RestController;
+
+import io.swagger.v3.oas.annotations.Operation;
+import io.swagger.v3.oas.annotations.media.Content;
+import io.swagger.v3.oas.annotations.media.Schema;
+import io.swagger.v3.oas.annotations.responses.ApiResponse;
+import io.swagger.v3.oas.annotations.responses.ApiResponses;
+
+@RestController
+@ApiResponses(value = {
+    @ApiResponse(responseCode = "401", ref = SecurityProblemResponsesConfiguration.UNAUTHORIZED_401_NO_TOKEN_RESPONSE_REF),
+    @ApiResponse(responseCode = "401", ref = SecurityProblemResponsesConfiguration.UNAUTHORIZED_401_BAD_TOKEN_RESPONSE_REF),
+    @ApiResponse(responseCode = "403", ref = SecurityProblemResponsesConfiguration.FORBIDDEN_403_RESPONSE_REF) })
+//@ApiResponses(value = {
+//    @ApiResponse(responseCode = "401", description = "Invalid authentication.", content = {@Content(schema = @Schema(implementation = Problem.class), mediaType = APPLICATION_PROBLEM_JSON_VALUE)}),
+//    @ApiResponse(responseCode = "401", description = "Invalid authentication.",content = {@Content(schema = @Schema(implementation = Problem.class), mediaType = APPLICATION_PROBLEM_JSON_VALUE)}),
+//    @ApiResponse(responseCode = "403", description = "Missing authorities.",content = {@Content(schema = @Schema(implementation = Problem.class), mediaType = APPLICATION_PROBLEM_JSON_VALUE)}) })
+public class HelloController<T> {
+
+  private static final Collection<String> CURRENCIES = new ArrayList<>();
+  static {
+    CURRENCIES.add("EUR");
+    CURRENCIES.add("USD");
+  }
+
+  @GetMapping
+  @Operation(description = "Get all currencies", summary = "getAllCurrencies")
+  @ApiResponses(value = { @ApiResponse(responseCode = "200", description = "All currencies returned") })
+  public ResponseEntity<Collection<String>> getAllCurrencies() {
+    return ok(CURRENCIES);
+  }
+
+}
diff --git a/springdoc-openapi-webmvc-core/src/test/java/test/org/springdoc/api/app126/Problem.java b/springdoc-openapi-webmvc-core/src/test/java/test/org/springdoc/api/app126/Problem.java
new file mode 100644
index 0000000..400ef63
--- /dev/null
+++ b/springdoc-openapi-webmvc-core/src/test/java/test/org/springdoc/api/app126/Problem.java
@@ -0,0 +1,73 @@
+package test.org.springdoc.api.app126;
+
+import java.net.URI;
+import java.util.Collections;
+import java.util.Map;
+
+public interface Problem {
+
+    URI DEFAULT_TYPE = URI.create("about:blank");
+
+    /**
+     * An absolute URI that identifies the problem type. When dereferenced,
+     * it SHOULD provide human-readable documentation for the problem type
+     * (e.g., using HTML). When this member is not present, its value is
+     * assumed to be "about:blank".
+     *
+     * @return an absolute URI that identifies this problem's type
+     */
+    default URI getType() {
+        return DEFAULT_TYPE;
+    }
+
+    /**
+     * A short, human-readable summary of the problem type. It SHOULD NOT
+     * change from occurrence to occurrence of the problem, except for
+     * purposes of localisation.
+     *
+     * @return a short, human-readable summary of this problem
+     */
+    default String getTitle() {
+        return null;
+    }
+
+    /**
+     * The HTTP status code generated by the origin server for this
+     * occurrence of the problem.
+     *
+     * @return the HTTP status code
+     */
+    default Integer getStatus() {
+        return null;
+    }
+
+    /**
+     * A human readable explanation specific to this occurrence of the problem.
+     *
+     * @return A human readable explaination of this problem
+     */
+    default String getDetail() {
+        return null;
+    }
+
+    /**
+     * An absolute URI that identifies the specific occurrence of the problem.
+     * It may or may not yield further information if dereferenced.
+     *
+     * @return an absolute URI that identifies this specific problem
+     */
+    default URI getInstance() {
+        return null;
+    }
+
+    /**
+     * Optional, additional attributes of the problem. Implementations can choose to ignore this in favor of concrete,
+     * typed fields.
+     *
+     * @return additional parameters
+     */
+    default Map<String, Object> getParameters() {
+        return Collections.emptyMap();
+    }
+
+}
\ No newline at end of file
diff --git a/springdoc-openapi-webmvc-core/src/test/java/test/org/springdoc/api/app126/SecurityProblemResponsesConfiguration.java b/springdoc-openapi-webmvc-core/src/test/java/test/org/springdoc/api/app126/SecurityProblemResponsesConfiguration.java
new file mode 100644
index 0000000..e842b62
--- /dev/null
+++ b/springdoc-openapi-webmvc-core/src/test/java/test/org/springdoc/api/app126/SecurityProblemResponsesConfiguration.java
@@ -0,0 +1,54 @@
+package test.org.springdoc.api.app126;
+
+import static org.springframework.http.MediaType.APPLICATION_PROBLEM_JSON_VALUE;
+
+import java.io.IOException;
+import java.util.AbstractMap;
+import java.util.Map;
+
+import org.springframework.beans.factory.parsing.Problem;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+
+import io.swagger.v3.oas.models.media.Content;
+import io.swagger.v3.oas.models.media.MediaType;
+import io.swagger.v3.oas.models.media.Schema;
+import io.swagger.v3.oas.models.responses.ApiResponse;
+
+/**
+ * Configuration class defining standard OpenAPI Specification for operations
+*/
+@Configuration
+public class SecurityProblemResponsesConfiguration {
+
+	private static final String HTTP_401_NO_TOKEN = "http401NoToken";
+	private static final String HTTP_401_BAD_TOKEN = "http401BadToken";
+	private static final String HTTP_403 = "http403";
+	public static final String UNAUTHORIZED_401_NO_TOKEN_RESPONSE_REF = "#/components/responses/" + HTTP_401_NO_TOKEN;
+	public static final String UNAUTHORIZED_401_BAD_TOKEN_RESPONSE_REF = "#/components/responses/" + HTTP_401_BAD_TOKEN;
+	public static final String FORBIDDEN_403_RESPONSE_REF = "#/components/responses/" + HTTP_403;
+
+	@Bean
+	public Map.Entry<String, ApiResponse> http401NoTokenResponse() throws IOException {
+		return simpleResponse(HTTP_401_NO_TOKEN, "Invalid authentication.");
+	}
+	
+	@Bean
+	public Map.Entry<String, ApiResponse> http401BadTokenResponse() throws IOException {
+		return simpleResponse(HTTP_401_BAD_TOKEN, "Invalid authentication.");
+	}
+
+	@Bean
+	public Map.Entry<String, ApiResponse> http403Example() throws IOException {
+		return simpleResponse(HTTP_403, "Missing authorities.");
+	}
+
+	private Map.Entry<String, ApiResponse> simpleResponse(String code, String description) throws IOException {
+		ApiResponse response = new ApiResponse().description(description).content(new Content().addMediaType(
+				APPLICATION_PROBLEM_JSON_VALUE,
+				new MediaType()
+						.schema(new Schema<Problem>().$ref("#/components/schemas/Problem"))));
+		return new AbstractMap.SimpleEntry<>(code, response);
+	}
+
+}
diff --git a/springdoc-openapi-webmvc-core/src/test/java/test/org/springdoc/api/app126/SpringDocApp126Test.java b/springdoc-openapi-webmvc-core/src/test/java/test/org/springdoc/api/app126/SpringDocApp126Test.java
new file mode 100644
index 0000000..f41cb74
--- /dev/null
+++ b/springdoc-openapi-webmvc-core/src/test/java/test/org/springdoc/api/app126/SpringDocApp126Test.java
@@ -0,0 +1,50 @@
+/*
+ *
+ *  *
+ *  *  *
+ *  *  *  * Copyright 2019-2020 the original author or authors.
+ *  *  *  *
+ *  *  *  * Licensed under the Apache License, Version 2.0 (the "License");
+ *  *  *  * you may not use this file except in compliance with the License.
+ *  *  *  * You may obtain a copy of the License at
+ *  *  *  *
+ *  *  *  *      https://www.apache.org/licenses/LICENSE-2.0
+ *  *  *  *
+ *  *  *  * Unless required by applicable law or agreed to in writing, software
+ *  *  *  * distributed under the License is distributed on an "AS IS" BASIS,
+ *  *  *  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  *  *  * See the License for the specific language governing permissions and
+ *  *  *  * limitations under the License.
+ *  *  *
+ *  *
+ *
+ *
+ */
+package test.org.springdoc.api.app126;
+
+import java.util.List;
+import java.util.Map;
+
+import org.springdoc.core.customizers.OpenApiCustomiser;
+import org.springframework.boot.autoconfigure.SpringBootApplication;
+import org.springframework.context.annotation.Bean;
+
+import io.swagger.v3.oas.models.responses.ApiResponse;
+import test.org.springdoc.api.AbstractSpringDocTest;
+
+
+/**
+ * Tests Spring meta-annotations as method parameters
+ */
+public class SpringDocApp126Test extends AbstractSpringDocTest {
+
+	@SpringBootApplication
+	static class SpringDocTestApp {
+		
+		@Bean
+		public OpenApiCustomiser responseRegistrationCustomizer(List<Map.Entry<String, ApiResponse>> responsesToRegister) {
+			return openApi -> responsesToRegister.forEach(entry -> openApi.getComponents().addResponses(entry.getKey(), entry.getValue()));
+		}
+		
+	}
+}
diff --git a/springdoc-openapi-webmvc-core/src/test/resources/results/app126.json b/springdoc-openapi-webmvc-core/src/test/resources/results/app126.json
new file mode 100644
index 0000000..1c05202
--- /dev/null
+++ b/springdoc-openapi-webmvc-core/src/test/resources/results/app126.json
@@ -0,0 +1,111 @@
+{
+   "openapi":"3.0.1",
+   "info":{
+      "title":"OpenAPI definition",
+      "version":"v0"
+   },
+   "servers":[
+      {
+         "url":"http://localhost",
+         "description":"Generated server url"
+      }
+   ],
+   "paths":{
+      "/":{
+         "get":{
+            "tags":[
+               "hello-controller"
+            ],
+            "summary":"getAllCurrencies",
+            "description":"Get all currencies",
+            "operationId":"getAllCurrencies",
+            "responses":{
+               "401":{
+                  "$ref":"#/components/responses/http401BadToken"
+               },
+               "403":{
+                  "$ref":"#/components/responses/http403"
+               },
+               "200":{
+                  "description":"All currencies returned",
+                  "content":{
+                     "*/*":{
+                        "schema":{
+                           "type":"array",
+                           "items":{
+                              "type":"string"
+                           }
+                        }
+                     }
+                  }
+               }
+            }
+         }
+      }
+   },
+   "components":{
+      "responses":{
+         "http401NoToken":{
+            "description":"Invalid authentication.",
+            "content":{
+               "application/problem+json":{
+                  "schema":{
+                     "$ref":"#/components/schemas/Problem"
+                  }
+               }
+            }
+         },
+         "http401BadToken":{
+            "description":"Invalid authentication.",
+            "content":{
+               "application/problem+json":{
+                  "schema":{
+                     "$ref":"#/components/schemas/Problem"
+                  }
+               }
+            }
+         },
+         "http403":{
+            "description":"Missing authorities.",
+            "content":{
+               "application/problem+json":{
+                  "schema":{
+                     "$ref":"#/components/schemas/Problem"
+                  }
+               }
+            }
+         }
+      },
+      "schemas":{
+         "Problem":{
+            "type":"object",
+            "properties":{
+               "instance":{
+                  "type":"string",
+                  "format":"uri"
+               },
+               "type":{
+                  "type":"string",
+                  "format":"uri"
+               },
+               "parameters":{
+                  "type":"object",
+                  "additionalProperties":{
+                     "type":"object"
+                  }
+               },
+               "status":{
+                  "type":"integer",
+                  "format":"int32"
+               },
+               "title":{
+                  "type":"string"
+               },
+               "detail":{
+                  "type":"string"
+               }
+            }
+         }
+      }
+   }
+}
\ No newline at end of file
